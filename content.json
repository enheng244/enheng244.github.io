{"meta":{"title":"Hexo","subtitle":"","description":"早日发财！","author":"R W","url":"http://example.com","root":"/"},"pages":[{"title":"标签","date":"2021-08-05T16:37:42.000Z","updated":"2021-08-05T16:39:56.400Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-08-05T16:42:14.000Z","updated":"2021-08-05T16:46:17.616Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"java方法","slug":"java方法","date":"2021-08-05T14:16:55.000Z","updated":"2021-08-05T14:16:55.993Z","comments":true,"path":"2021/08/05/java方法/","link":"","permalink":"http://example.com/2021/08/05/java%E6%96%B9%E6%B3%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"java流程控制","slug":"java流程控制","date":"2021-08-05T13:53:59.000Z","updated":"2021-08-05T13:59:56.764Z","comments":true,"path":"2021/08/05/java流程控制/","link":"","permalink":"http://example.com/2021/08/05/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/","excerpt":"Scanner对象 顺序结构 选择结构 循环结构","text":"Scanner对象 顺序结构 选择结构 循环结构 Scanner对象java.util.Scanner Java5的新特性，可以通过Scanner类来获取用户的输入 基本语法 1Scanner s = new Scanner(System.in); 通过next()和nextLine()获取字符串 通过hasNext()和hasNextLine()判断有没有输入 属于io流如果不关闭会一直占用资源，记得scanner.close() next() 一定要读取到有效字符后才可以结束输入 对输入有效字符之前遇到的空白，next()方法会自动将其去掉 输入有效字符后，将输入的空白作为分隔符或结束符 next()不能得到带有空格的字符串 nextLine() 以Enter为结束符 可以获得空白 顺序结构最基本的默认结构，从上到下执行 选择结构 if单选择结构 123if()&#123; &#125; if双选择结构 12345if()&#123; &#125;else&#123; &#125; if多选择结构 123456789if()&#123; &#125;else if()&#123; &#125;else if()&#123; &#125;else&#123; &#125; switch多选择结构 12345678910switch()&#123; case value1: //语句 break; case value2: //语句 break; default: //语句&#125; switch语句中的变量类型可以是byte, short, int, char, String(从Java SE 7开始支持) case标签必须为字符串常量或者字面量 case没有break把后面的所有语句全执行 循环结构 while循环 1234567while()&#123; &#125;while(true)&#123;//死循环 //服务器监听响应&#125; do..while循环 123do&#123; &#125;while()//循环体至少会执行一次 for循环 1234for(初始化;布尔表达式;更新)&#123; //初始化语句可以是空语句，也可以是一种类型多个变量 //布尔表达式和更新也可以是空语句，即for(;;)&#123;&#125;是死循环&#125; 增强for循环 Java5引入的一种主要用于数组或者集合的增强型for循环 1234for(声明语句:表达式)&#123; //声明语句：声明新的局部变量，变量的类型必须和数组元素的类型匹配。作用域限定值循环语句块，其值与此时数组元素的值相等 //表达式：是要访问的数组名，或者是返回值为数组的方法&#125; break和continue break：退出整个循环 continue：退出本轮循环","categories":[],"tags":[]},{"title":"java基础语法","slug":"java基础语法","date":"2021-08-02T14:22:04.000Z","updated":"2021-08-05T16:46:37.573Z","comments":true,"path":"2021/08/02/java基础语法/","link":"","permalink":"http://example.com/2021/08/02/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","excerpt":"注释 标识符 数据类型 类型转换 变量 常量 变量命名规范 运算法 包机制 JavaDoc","text":"注释 标识符 数据类型 类型转换 变量 常量 变量命名规范 运算法 包机制 JavaDoc 注释单行注释 1//单行注释 多行注释 12345/*多行注释多行注释多行注释*/ 文档注释（JavaDoc） 1234/** *@Description HelloWorld *@Author RW */ 标识符类名，方法名，变量名都是标识符 所有标识符必须以A-Z, a-z, $, _开始 首字符之后的可以是A-Z, a-z, $, _，数字 不能用关键字 标识符大小写敏感 可以用中文，但是不建议 关键字 String不是关键字，是类 数据类型java，c++是强类型语言（所有变量必须先定义后使用） 安全性高，速度慢 js是弱类型语言 java的数据类型分为两大类 基本类型 整数类型：byte占1字节, short占2字节, int占4字节, long占8字节 long类型要在数字后面加L， long num = 30L; 浮点类型：float占4字节, double占8字节 float类型要在数字后面加F， float num = 30F; 字符类型：char占2字节 boolean类型：占1位 值只有true和false 引用类型 类 接口 数组 java中表示进制 二进制 0b 八进制 0 十六进制 0x 浮点数（float double）是离散的，有舍入误差，接近但不等于 123float f = 0.1f;//0.1double d = 1.0/10;//0,1System.out.println(f==d); //会输出false 123float d1 = 2313131323123113f;float d2 = d1 + 1;System.out.println(d1==d2); //会输出true 因此，最好避免使用浮点数进行比较 所有的字符本质还是数字 编码 Unicode 2字节 0-65536 1char c = &#x27;\\u0061&#x27;; //c输出‘a&#x27; 转义字符 \\t 制表符 \\n 换行 ……. 类型转换低—————————————————————&gt;高 byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double 从低到高，占的位越来越多，且小数高于整数 强制转换 高-低 (类型)变量名 e.g. int(100) 自动转换 低-高 注意点： 不能对布尔值进行转换 不能把对象类型转换为不相干类型 再把高容量转换到低容量时，要做强制转换 转换的时候可能存在内存溢出或者精度的问题 在操作比较大的数的时候，要注意溢出 tips：JDK7新特性，大的数可以在中间加下划线方便看 比如1_0000_0000 变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域 变量作用域 类变量 实例变量：从属于对象（类）可以不初始化值，有自动初始化 数值类型初始化默认0 0.0 布尔值默认是false 除了基本变量，其余的默认值都为null(比如string) 局部变量：必须声明和初始化值 不会自动初始化 1234567public class demo&#123; static double salary = 2500;//类变量 String str = &#x27;abc&#x27;;//实例变量 public static void main(String[] args)&#123; int a = 0;//局部变量 &#125;&#125; 常量初始化后不能再改值 1static final double PI = 3.14;//常量名一般使用大写字符 tip：public，final和static都是修饰符，不存在先后顺序 变量命名规范类成员变量，局部变量：首字母小写，驼峰 常量：大写字母和下划线 MAX_VALUE 类名：首字母大写，驼峰 方法名：首字母小写，驼峰 run() 运算符算数运算符：+ - * / % ++ – (++a是先自增在赋值，a++是先赋值再自增) 赋值运算符：= 关系运算符：&gt;, &lt;, &gt;=, &lt;=, ==, !=, instanceof 逻辑运算符（与或非）：&amp;&amp; || ! 短路运算：a&amp;&amp;b 如果a已经是假的，那么不在看b 位运算符： &amp; | ^ ~ &gt;&gt; &lt;&lt; &gt;&gt;&gt; 2*8=16 可以是2&lt;&lt;3 = 16 条件运算符： ? : 扩展赋值运算符： +=, -=, *=, /= 12345678910long a = 23123123;int b= 123;short c = 10;byte d = 8;/*a+b+c+d结果是Long类型b+c+d结果是int类型c+d结果是int类型因为有long就是long，没有long就是int*/ 包机制本质就是文件夹 格式是package com.baidu.baike; 且必须在前上面 一般利用公司域名倒置作为包名 JavaDoc用来生成自己API文档 参数信息 @author作者名 @version版本号 @since指明需要最早使用的jdk版本 @param参数名 @return返回值情况 @throws异常抛出情况 生成步骤（也可以用idea之类的打开） ​ 找到java文件所在文件夹，打开cmd ​ 输入javadoc -encoding UTF-8 -charset UTF-8 Doc.java ​ 然后在文件夹中就可以找到","categories":[{"name":"java SE","slug":"java-SE","permalink":"http://example.com/categories/java-SE/"}],"tags":[{"name":"java SE","slug":"java-SE","permalink":"http://example.com/tags/java-SE/"}]},{"title":"win10下基于hexo+github搭建个人博客过程","slug":"win10下基于hexo-github搭建个人博客过程","date":"2021-08-02T12:50:31.000Z","updated":"2021-08-02T14:10:54.605Z","comments":true,"path":"2021/08/02/win10下基于hexo-github搭建个人博客过程/","link":"","permalink":"http://example.com/2021/08/02/win10%E4%B8%8B%E5%9F%BA%E4%BA%8Ehexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B/","excerpt":"这个博客就是基于hexo+github所搭建的网站，在此先记录一下搭建的过程","text":"这个博客就是基于hexo+github所搭建的网站，在此先记录一下搭建的过程 Step1 安装nodejs在https://nodejs.org/上下载14.17.4LTS（我搭建时的最新版本） 下载完后直接无脑下一步安装就好。（亲测没必要装在c盘） 安装完之后，win+R调出搜索，输入cmd，打开命令行，分别输入 1node -v 1npm -v 查看是否成功安装。 Step2 安装cnpm在命令行中输入 1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装完之后输入 1cnpm -v 查看是否成功安装 Step3 用cnpm安装hexo框架在命令行中输入 1cnpm install -g hexo-cli 安装完之后输入 1hexo -v 查看是否成功安装 Step4 在任意位置建立空文件夹这个文件夹用于存放博客的所有内容。e.g.我的路径是E:\\study\\blog\\ Step5 进入刚刚创建的文件夹在空白处按住shift单击右键打开PowerShell窗口。在命令行中输入 1hexo init 这里注意由于我的路径是在E盘中，所以并没有管理员权限的问题，如果在c盘可能会有（我没自己试过） 初始化后进入文件夹会发现出现很多文件。 Step6 启动hexo还是在blog文件夹下打开PowerShell窗口。在命令行中输入 1hexo s 会出现提示http://localhost:4000/，在浏览器输入这个网址进入博客。Ctrl+c退出 Step7 创建文章还是在blog文件夹下打开PowerShell窗口。在命令行中输入 1hexo n &#x27;文章名字&#x27; 之后进入/source/posts，发现新出现了一个 文章名字.md 的文件。直接txt格式打开用markdown格式写文章就行。 Step8 上传文章返回blog文件夹下打开PowerShell窗口。在命令行中输入 123hexo cleanhexo ghexo s 再从http://localhost:4000/进入博客，发现文章已经上传。 Step9 将博客部署到githubhttps://github.com/登陆自己的github账号，点右上角的+，New repository 在Repository name输入 自己的github名.github.io 比如我的github叫enheng244，我就是enheng244.github.io 然后Create repository 在blog文件夹下打开PowerShell窗口。在命令行中输入 1cnpm install --save hexo-deployer-git 安装完之后，在blog文件下找到_config.yml，进入后在最底部找到#Deployment，配置如下 123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: https://github.com/enheng244/enheng244.github.io.git branch: master repo行换成自己的github地址即可。 Step10 进入博客此时在浏览器输入enheng244.github.io即可访问自己的博客 Step11 换主题在github上或其他地方可以找到很多主题，可以按照其中的文档去换主题 Step12 常用命令1234hexo cleanhexo ghexo s hexo d","categories":[],"tags":[]},{"title":"markdown语法总结","slug":"markdown语法总结","date":"2021-08-02T10:35:12.000Z","updated":"2021-08-05T13:55:53.823Z","comments":true,"path":"2021/08/02/markdown语法总结/","link":"","permalink":"http://example.com/2021/08/02/markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/","excerpt":"从前只是零零散散的用过一些markdown形式，既然下定决心要开始写博客了，所有最先做的先要把markdown的语法先过一遍，以后就不用再每次用的时候去一直百度。","text":"从前只是零零散散的用过一些markdown形式，既然下定决心要开始写博客了，所有最先做的先要把markdown的语法先过一遍，以后就不用再每次用的时候去一直百度。 标题一级标题（一个# + 空格 + 标题名）二级标题（二个# + 空格 + 标题名）三级标题（三个# + 空格 + 标题名）四级标题（四个# + 空格 + 标题名）五级标题（五个# + 空格 + 标题名）最多支持到六级标题（六个# + 空格 + 标题名）字体Hello.World!(粗体前后各加两个星号) Hello.World!（斜体前后各加一个星号） Hello.World!（粗体加粗体前后各加三个星号） Hello.World!（前后各加两个波浪号） 引用 前面&gt;加空格 分割线三个减号— 三个星号*** 图片感叹号中括号小括号前面写图片名后面写路径 可以是本地的也可是网上的路径 超链接点击跳转到百度 中括号小括号前面写文字后面写网址 列表有序列表： 1.空格 a b c 无序列表： -空格 a b c 表格名字|性别|生日 –|–|–| 张三|男|1997.1.1 名字 性别 生日 张三 男 1997.1.1 代码三个` （tab上面的）+ 语言，比如java + 回车 1import","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-08-01T16:52:41.360Z","updated":"2021-08-02T12:45:19.379Z","comments":true,"path":"2021/08/02/hello-world/","link":"","permalink":"http://example.com/2021/08/02/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"java SE","slug":"java-SE","permalink":"http://example.com/categories/java-SE/"}],"tags":[{"name":"java SE","slug":"java-SE","permalink":"http://example.com/tags/java-SE/"}]}